version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID1.
    parameters:
      workflow_id:
        type: string  
    steps:
      - run:
          name: Delete s3 bucket
          when: on_fail
          command: |
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
            exit 0    
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: ${CIRCLE_WORKFLOW_ID}"  
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
#            exit 1
  revert-migrations:
    description: Revert the last migration
    parameters:
      workflow_id:
        type: string      
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Your Memstash or kvdb.io GET URL code goes here
            # Example: kvdb.io
            SUCCESS=$(curl --insecure  https://kvdb.io/CYySo2NxGrRN8STcUtj375/migration_${CIRCLE_WORKFLOW_ID:0:7})
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi  
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
          #  exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
          #  exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:

          key: frontend-test
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-test
      - run:
          name: Test back-end
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      # Checkout code from git
      - restore_cache:
          keys: [frontend-build]
      # Restore from cache
      - run:  
          name: Scan front-end
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
      # Your job code here

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      # Checkout code from git
      - restore_cache:
          keys: [backend-build]
      # Restore from cache
      - run:  
          name: Scan back-end
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
      # Your job code here
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: SSH or Git CLI client 
          command: |
            yum install -y openssh-client git
            
      - checkout 
      - run:
          name: Install Tar & gzip
          command: |
            yum install -y tar gzip
          
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} 
              --region us-east-1
          #    exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
              --region us-east-1
          #  exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command:  |
            echo [web] > .circleci/ansible/inventory.txt
            echo [web] > .circleci/ansible/temp.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text >> .circleci/ansible/temp.txt 
            cp .circleci/ansible/temp.txt .circleci/ansible/inventory.txt
            cat .circleci/ansible/temp.txt
            cat .circleci/ansible/inventory.txt
          #  exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11 
    steps:
      - run:
          name: SSH or Git CLI client 
          command: |
            apk add --update openssh-client git

      - checkout
      - add_ssh_keys:
              fingerprints: ["32:3d:50:75:a6:18:19:3b:ae:a7:e3:f9:f3:61:31:84"] 
      # attach workspace


      - attach_workspace:
          at: ~/
         
      - run:
          name: Install dependencies
          command: |
                apk add --no-cache \
                python3 \
                py3-pip \
                && pip3 install --upgrade pip \
                && pip3 install \
                awscli \
                && rm -rf /var/cache/apk/*
                apk add --update ansible
          #  exit 1
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible/  
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml --ssh-common-args='-o StrictHostKeyChecking=no'
          #  exit 1
      # Here's where you will add some code to rollback on failure   
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0

    steps:
      - checkout 
      - restore_cache:
          key: backend-build
      
      - run:
            name: enviroments
            
            command: |
              cd  backend
              touch .env
              echo ENVIROMENT=production > .env
              echo NODE_ENV=production >> ".env"
              echo TYPEORM_CONNECTION=postgres >> .env
              echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> .env
              echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
              echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env
              echo TYPEORM_HOST=$TYPEORM_HOST >> .env
              echo TYPEORM_PORT=$TYPEORM_PORT >> .env
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
              ls -latr
              cat .env
      
      - attach_workspace:
            at: ~/
      # Checkout code from git
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install reflect-metadata
            npm i ajv@6.9.1
            npm i winston
            npm install
            npm audit fix 
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
          no_output_timeout: 30m 

          # Your code here
          #  exit 1
      #- run:
      #    name: Send migration results to file as memstash not available
      #    command: |
      #      if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
      #        then
      #          ~/project/temp/migrations_dump.txt
      #      fi
#              curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
#            fi
      
#      - persist_to_workspace:
#            root: ~/
#            paths:
#              - project/.circleci/temp/migration_dump.txt 

      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          # Your code here
#            exit 1
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update || : && sudo apt-get install python -y
            sudo apt-get -qq install awscli
            # your code here
      - attach_workspace:
            at: .
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
          # your code here
#           export API_URL="http://${BACKEND_IP}:3030"
#            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build 
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            URL02=("http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com")
            echo URL02 "${URL02}"
        # your code here
      # Here's where you will add some code to rollback on failure    
      - persist_to_workspace:
            root: .
            paths:
              - frontend/dist

      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11      
      # Docker image here that supports Ansible
    steps:
      - checkout 
      # Checkout code from git
      - add_ssh_keys:
              fingerprints: ["32:3d:50:75:a6:18:19:3b:ae:a7:e3:f9:f3:61:31:84"] 
      
      # Add ssh keys with fingerprint
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Install dependencies
          command: |
                apk add --no-cache \
                python3 \
                py3-pip \
                && pip3 install --upgrade pip \
                && pip3 install \
                awscli \
                && rm -rf /var/cache/apk/*

                apk add --update ansible
                apk add --update curl
                apk add --update nodejs
                apk add --update npm
                apk add --update tar                        
                apk add --update gzip            

      # attach workspace
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm install typescript --save-dev
            npm run build
            mv node_modules dist
            echo NODE_ENV=production >> "dist/.env"
            echo ENVIRONMENT=production >> "dist/.env"
            echo VERSION=1 >> "dist/.env"
            echo TYPEORM_CONNECTION=postgres >> "dist/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "dist/.env"
            echo TYPEORM_ENTITIES=./modules/domain/**/*.entity.js >> "dist/.env"
            echo TYPEORM_MIGRATIONS=./migrations/*.js >> "dist/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "dist/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "dist/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "dist/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "dist/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "dist/.env" 
            echo NODE_PATH=/home/ubuntu/dist/node_modules >> "dist/.env"
            tar -czvf artefacts.tar.gz ./dist
            cd ..
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
#            tar -C backend -czvf artifact.tar.gz .

      # your code here
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
              apk add --no-cache \
              python3 \
              py3-pip \
              && pip3 install --upgrade pip \
              && pip3 install \
              awscli \
              && rm -rf /var/cache/apk/*

                apk add --update ansible
                apk add --update curl
                apk add --update nodejs
                apk add --update npm
                apk add --update tar                        
                apk add --update gzip                      
            # your code here
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"

            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi

#      - run:
#          name: Backend smoke test.
#          command: |
#            if curl "${API_URL}/api/status" | grep "ok"
#            then
#              return 0
#            else
#              return 1
#            fi

        # your code here
      - run:
          name: Frontend smoke test.
          command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                return 0
              else
                return 1
              fi
            # your code here
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  

  cloudfront-update:
    docker:
    - image: amazon/aws-cli
  # Docker image here that supports AWS CLI
    steps:
      - checkout 
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip

      - attach_workspace:
          at: ~/

      - run:
          name: Update cloudfront distribution
          command: |
            export OldworkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --output text)

            echo ${OldworkflowID} >> ~/OldworkflowID.txt
            cat ~/OldworkflowID.txt

            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

            echo "OldworkflowID: ${OldworkflowID}"
            echo "Current WorkflowID: ${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failur
      - persist_to_workspace:
          root: ~/
          paths:
            - OldworkflowID.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  
  cleanup:
    docker:
    - image: amazon/aws-cli
  # Docker image here that supports AWS CLI
    steps:
      - checkout 
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip

      - attach_workspace:
          at: ~/

#      - run:
#          name: Get old stack workflow id
#          command: |
#            export OldworkflowID=$(<~/OldworkflowID.txt)
#            echo "OldworkflowID : ${OldworkflowID}"
#
#            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
# 
#             # export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
#             --stack-status-filter CREATE_COMPLETE --output text)) 
#             echo Stack names: "${STACKS[@]}"          
# #            export OldWorkflowID="the id here"
#            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
              export OldworkflowID=$(<~/OldworkflowID.txt)
              aws s3 rm "s3://${OldworkflowID}" --recursive
              echo "OldworkflowID : ${OldworkflowID}"

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
          context: CircleCI
      - scan-frontend:
          requires: [build-frontend]
          context: CircleCI
      - deploy-infrastructure:
          requires: [build-frontend]
          filters:
            branches:
              only: [master]    
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
